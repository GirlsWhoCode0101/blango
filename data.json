[{"model": "blog.comment", "pk": 1, "fields": {"creator": 1, "content": "Romeo ich lieb dich so.", "content_type": 8, "object_id": 1, "created_at": "2022-08-05T09:07:51.129Z", "modified_at": "2022-08-05T09:07:51.129Z"}}, {"model": "blog.comment", "pk": 2, "fields": {"creator": 1, "content": "Wie geil ist das denn!", "content_type": 8, "object_id": 1, "created_at": "2022-08-05T09:09:00.653Z", "modified_at": "2022-08-05T09:09:00.653Z"}}, {"model": "blog.comment", "pk": 3, "fields": {"creator": 1, "content": "mit crispy gehts auch", "content_type": 8, "object_id": 1, "created_at": "2022-08-05T09:51:26.057Z", "modified_at": "2022-08-05T09:51:26.057Z"}}, {"model": "blog.comment", "pk": 4, "fields": {"creator": 1, "content": "So a guddes Dign", "content_type": 8, "object_id": 3, "created_at": "2022-08-11T17:47:01.584Z", "modified_at": "2022-08-11T17:47:01.584Z"}}, {"model": "blog.comment", "pk": 5, "fields": {"creator": 1, "content": "try logging", "content_type": 8, "object_id": 3, "created_at": "2022-08-11T18:29:33.767Z", "modified_at": "2022-08-11T18:29:33.767Z"}}, {"model": "blog.comment", "pk": 6, "fields": {"creator": 1, "content": "no ma", "content_type": 8, "object_id": 3, "created_at": "2022-08-11T18:32:02.195Z", "modified_at": "2022-08-11T18:32:02.195Z"}}, {"model": "blog.comment", "pk": 7, "fields": {"creator": 1, "content": "mit formatter", "content_type": 8, "object_id": 3, "created_at": "2022-08-11T18:41:55.096Z", "modified_at": "2022-08-11T18:41:55.096Z"}}, {"model": "blog.comment", "pk": 8, "fields": {"creator": 1, "content": "take 2", "content_type": 8, "object_id": 3, "created_at": "2022-08-11T18:43:16.688Z", "modified_at": "2022-08-11T18:43:16.688Z"}}, {"model": "blog.tag", "pk": 1, "fields": {"value": "girlwhocode"}}, {"model": "blog.tag", "pk": 2, "fields": {"value": "dfgr"}}, {"model": "blog.tag", "pk": 3, "fields": {"value": "objects"}}, {"model": "blog.tag", "pk": 5, "fields": {"value": "sdfsdg"}}, {"model": "blog.post", "pk": 1, "fields": {"author": 1, "created_at": "2022-07-31T09:46:06.435Z", "modified_at": "2022-08-04T10:36:21.309Z", "published_at": "2022-07-31T09:45:23Z", "title": "where is the title", "slug": "whereisthetile", "summary": "Decorators are great", "content": "Chaining Decorators in Python\r\n\r\nMultiple decorators can be chained in Python.\r\n\r\nThis is to say, a function can be decorated multiple times with different (or same) decorators. We simply place the decorators above the desired function.", "tags": [1]}}, {"model": "blog.post", "pk": 2, "fields": {"author": 2, "created_at": "2022-08-04T10:37:45.172Z", "modified_at": "2022-08-04T10:37:45.172Z", "published_at": "2022-08-04T10:36:36Z", "title": "Retrieving objects", "slug": "retreivingobjects", "summary": "Retrieving objects", "content": "Getting Help \r\n\r\n    Language: en \r\n\r\n    Documentation version: 4.0 \r\n\r\nMaking queries¶\r\n\r\nOnce you’ve created your data models, Django automatically gives you a database-abstraction API that lets you create, retrieve, update and delete objects. This document explains how to use this API. Refer to the data model reference for full details of all the various model lookup options.\r\n\r\nThroughout this guide (and in the reference), we’ll refer to the following models, which comprise a blog application:\r\n\r\nfrom datetime import date\r\n\r\nfrom django.db import models\r\n\r\nclass Blog(models.Model):\r\n    name = models.CharField(max_length=100)\r\n    tagline = models.TextField()\r\n\r\n    def __str__(self):\r\n        return self.name\r\n\r\nclass Author(models.Model):\r\n    name = models.CharField(max_length=200)\r\n    email = models.EmailField()\r\n\r\n    def __str__(self):\r\n        return self.name\r\n\r\nclass Entry(models.Model):\r\n    blog = models.ForeignKey(Blog, on_delete=models.CASCADE)\r\n    headline = models.CharField(max_length=255)\r\n    body_text = models.TextField()\r\n    pub_date = models.DateField()\r\n    mod_date = models.DateField(default=date.today)\r\n    authors = models.ManyToManyField(Author)\r\n    number_of_comments = models.IntegerField(default=0)\r\n    number_of_pingbacks = models.IntegerField(default=0)\r\n    rating = models.IntegerField(default=5)\r\n\r\n    def __str__(self):\r\n        return self.headline\r\n\r\nCreating objects¶\r\n\r\nTo represent database-table data in Python objects, Django uses an intuitive system: A model class represents a database table, and an instance of that class represents a particular record in the database table.\r\n\r\nTo create an object, instantiate it using keyword arguments to the model class, then call save() to save it to the database.\r\n\r\nAssuming models live in a file mysite/blog/models.py, here’s an example:\r\n\r\n>>> from blog.models import Blog\r\n>>> b = Blog(name='Beatles Blog', tagline='All the latest Beatles news.')\r\n>>> b.save()\r\n\r\nThis performs an INSERT SQL statement behind the scenes. Django doesn’t hit the database until you explicitly call save().\r\n\r\nThe save() method has no return value.\r\n\r\nSee also\r\n\r\nsave() takes a number of advanced options not described here. See the documentation for save() for complete details.\r\n\r\nTo create and save an object in a single step, use the create() method.\r\nSaving changes to objects¶\r\n\r\nTo save changes to an object that’s already in the database, use save().\r\n\r\nGiven a Blog instance b5 that has already been saved to the database, this example changes its name and updates its record in the database:\r\n\r\n>>> b5.name = 'New name'\r\n>>> b5.save()\r\n\r\nThis performs an UPDATE SQL statement behind the scenes. Django doesn’t hit the database until you explicitly call save().\r\nSaving ForeignKey and ManyToManyField fields¶\r\n\r\nUpdating a ForeignKey field works exactly the same way as saving a normal field – assign an object of the right type to the field in question. This example updates the blog attribute of an Entry instance entry, assuming appropriate instances of Entry and Blog are already saved to the database (so we can retrieve them below):\r\n\r\n>>> from blog.models import Blog, Entry\r\n>>> entry = Entry.objects.get(pk=1)\r\n>>> cheese_blog = Blog.objects.get(name=\"Cheddar Talk\")\r\n>>> entry.blog = cheese_blog\r\n>>> entry.save()\r\n\r\nUpdating a ManyToManyField works a little differently – use the add() method on the field to add a record to the relation. This example adds the Author instance joe to the entry object:\r\n\r\n>>> from blog.models import Author\r\n>>> joe = Author.objects.create(name=\"Joe\")\r\n>>> entry.authors.add(joe)\r\n\r\nTo add multiple records to a ManyToManyField in one go, include multiple arguments in the call to add(), like this:\r\n\r\n>>> john = Author.objects.create(name=\"John\")\r\n>>> paul = Author.objects.create(name=\"Paul\")\r\n>>> george = Author.objects.create(name=\"George\")\r\n>>> ringo = Author.objects.create(name=\"Ringo\")\r\n>>> entry.authors.add(john, paul, george, ringo)\r\n\r\nDjango will complain if you try to assign or add an object of the wrong type.\r\nRetrieving objects¶\r\n\r\nTo retrieve objects from your database, construct a QuerySet via a Manager on your model class.\r\n\r\nA QuerySet represents a collection of objects from your database. It can have zero, one or many filters. Filters narrow down the query results based on the given parameters. In SQL terms, a QuerySet equates to a SELECT statement, and a filter is a limiting clause such as WHERE or LIMIT.\r\n\r\nYou get a QuerySet by using your model’s Manager. Each model has at least one Manager, and it’s called objects by default. Access it directly via the model class, like so:", "tags": [1, 3]}}, {"model": "blog.post", "pk": 3, "fields": {"author": 1, "created_at": "2022-08-11T17:44:25.801Z", "modified_at": "2022-08-11T17:44:25.801Z", "published_at": "2022-08-11T17:44:04Z", "title": "weffe", "slug": "esfsa", "summary": "sasg", "content": "asdsg", "tags": [5]}}, {"model": "blango_auth.user", "pk": 1, "fields": {"password": "argon2$argon2id$v=19$m=102400,t=2,p=8$YkY2MGxmVEdVd1VTQ1ZlT0UxblNSbA$yoJs3t9gBkvh+MyyL46W6g", "last_login": "2022-08-14T18:15:28.670Z", "is_superuser": true, "username": "codio", "first_name": "", "last_name": "", "email": "janine_byapple@me.com", "is_staff": true, "is_active": true, "date_joined": "2022-07-31T09:40:35.632Z", "groups": [], "user_permissions": []}}, {"model": "blango_auth.user", "pk": 2, "fields": {"password": "pbkdf2_sha256$260000$UXZAZMyJfpmEalWZesWCqP$uqfCqeVbvp8rlJRZcTvFoUJDKpImb1oYVLAGMASOFjM=", "last_login": null, "is_superuser": false, "username": "codiosecond", "first_name": "Romeo", "last_name": "Heini", "email": "soku@me.com", "is_staff": false, "is_active": true, "date_joined": "2022-08-04T10:32:00Z", "groups": [], "user_permissions": [33, 34, 36, 29, 30, 32, 25, 26, 28]}}]
